---
title: "R Practice: Functions"
author: "Nicole Greco"
format: html
---

# Load Packages


# Load Data


# Analysis

Warm up
```{r}
#Create function
double_it<- function(x) {
  return (2*x)
}


#Test function
double_it(x=12)
```

```{r}
exclaim_age<- function(age) {
  return(paste("I am", age, "years old!"))
}

exclaim_age(12)
```

Functions with conditionals
find_max() function
```{r}
# "find_max() function" #
find_max <- function(value_1, value_2) {
    
    if (value_1 > value_2) {
        return(value_1)
    }
    else if (value_2 > value_1) {
        return(value_2)
    }
}

2 * find_max(5,10)
```

```{r}
# `find_max()` function with error message
find_max <- function(value_1, value_2) {
    
    if (value_1 == value_2) {
        stop("Values must be different from each other.")
    }
    
    if (value_1 > value_2) {
        return(value_1)
    }
    else if (value_2 > value_1) {
        return(value_2)
    }
}

# try it out #
# does the message appear as you expected?
find_max(4, 4)
```


```{r}

# `find_max()` function with error messages and checks
find_max <- function(value_1, value_2, equal_ok = FALSE) {
    
    # `|` is the logical OR operator
    # `!=` is the not-equal-to operator
    if (is.numeric(value_1) != TRUE | is.numeric(value_2) != TRUE) {
        # alt expression: is.numeric(value_1) == FALSE | is.numeric(value_2) == FALSE
        stop("Value must be a numeric type.")
    }
    
    if (value_1 == value_2) {
        ### the values are equal; is value of the equal_ok argument TRUE?
        if(equal_ok) return(value_1)
        ### if equal_ok is not TRUE, then report an error
        stop("Values must be different from each other.")
    }
    
    if (value_1 > value_2) {
        return(value_1)
    }
    else if (value_2 > value_1) {
        return(value_2)
    }
}

# try it out #
# does the message appear as you expected?
find_max(4, 4)
find_max(4, 4, equal_ok = TRUE)
```






